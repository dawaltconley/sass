@use 'sass:map';
@use 'sass:math';

$class-name: 'animate' !default;
$load-delay: 5s !default;
$load-delay-property: --animation-load-delay;

:root {
    #{$load-delay-property}: #{$load-delay};
}

@function load-delay($delay) {
    @return calc(var(#{$load-delay-property}) + #{$delay});
}

// Fade animations

@mixin fade($direction, $distance: 30px) {
    $transforms: (
        'up': translate(0, $distance),
        'down': translate(0, -$distance),
        'left': translate(-$distance, 0),
        'right': translate($distance, 0)
    );
    $transform: map.get($transform, $direction);

    @if not $transform {
        @error '$direction must be one of #{map.keys($transforms)}';
    }

    @keyframes #{$name} {
        from {
            opacity: 0;
            transform: $transform;
        }

        to {
            opacity: 1;
            transform: translate(0, 0);
        }
    }

    animation-name: $name;
    animation-fill-mode: both;
    animation-duration: 1s;
    animation-delay: load-delay(1s);
}

@mixin fade-up($args...) {
    @include fade(up, $args...);
}
@mixin fade-down($args...) {
    @include fade(down, $args...);
}
@mixin fade-left($args...) {
    @include fade(left, $args...);
}
@mixin fade-right($args...) {
    @include fade(right, $args...);
}

// Swipe Animations
// TODO old, needs looking at

$swipe-animation-count: 0;

@mixin swipe($items, $dir: left, $dist: 20%, $dur: 4s, $trans: 0.5s, $init-delay: 0s, $y: 0, $overlap: false) {
    $swipe-animation-count: $swipe-animation-count + 1 !global;
    $swipe-animation-name: swipe-animation-#{$swipe-animation-count}; // give the keyframe a unique name

    $total-dur: if($overlap, $dur + $trans, $dur + (2 * $trans)); // total time element is animating or visible

    $trans-ratio: math.div($trans, $total-dur); // percentage of total animation time taken by single transition
    $start: math.div(100%, $items) * $trans-ratio; // frame at which the element should be visible (first animation concluded)
    $end: math.div(100%, $items) * (1 - $trans-ratio); // frame at which the element should begin to fade out (second animation begins)
    $pause: math.div(100%, $items); // frame at which the element has faded out and is waiting for next cycle

    @if $overlap {
        $trans-percent: math.div($trans-ratio, $items) * 100%;
        $end: $end + $trans-percent;
        $pause: $pause + $trans-percent;
    }

    $reverse: 1;

    @if $dir == 'right' {
        $reverse: -1;
    } @else if $dir != 'left' {
        @warn '`#{$dir}` is an invalid value for the $dir variable. Only `left` or `right` are supported.'
    }
    
    @keyframes #{$swipe-animation-name} {
        0% {
            opacity: 0;
            transform: translate($dist * $reverse, $y);
            animation-timing-function: if($trans <= 0s, step-end, if($overlap, linear, ease-out));
        }
        #{$start} {
            opacity: 1;
            transform: translate(0, $y);
            animation-timing-function: linear;
        }
        #{$end} {
            opacity: 1;
            transform: translate(0, $y);
            animation-timing-function: if($trans <= 0s, step-start, if($overlap, linear, ease-in));
        }
        #{$pause}, 100% {
            opacity: 0;
            transform: translate(-$dist * $reverse, $y);
            animation-timing-function: linear;
        }
    }

    animation-name: $swipe-animation-name;
    animation-duration: $total-dur * $items;
    animation-iteration-count: infinite;
    animation-fill-mode: both;

    @for $i from 1 through $items {
        &:nth-child(#{$i}) {
            animation-delay: load-delay(($i - 1) * $total-dur + $init-delay);
        }
    }
}

// Slideshow animations
// TODO how does it compare to carousel on jahleel's?

$slide-animation-count: 0;

@mixin slideshow($items, $dur: 4s, $trans: 0.5s, $init-delay: 0s, $z: 0) {
    $slide-animation-count: $slide-animation-count + 1 !global;
    $slide-animation-name: slide-animation-#{$slide-animation-count}; // give the keyframe a unique name

    $total-dur: $dur + $trans;                     // animation time for single element
    $trans-ratio: math.div($trans, $total-dur);             // fraction of animation time taken by single element's transition
    $trans-percent: math.div($trans-ratio, $items) * 100%;  // percent of animation time taken by single element's transition relative to whole cycle
    $fade-start: math.div(100%, $items);                    // frame at which the element should begin to fade out (second animation begins)
    $fade-end: math.div(100%, $items) + $trans-percent;     // frame at which the element has faded out and is waiting for next cycle

    @keyframes #{$slide-animation-name} {
        0% {
            z-index: $z;
            opacity: 1;
            animation-timing-function: step-end;
        }
        #{$fade-start} {
            z-index: $z + 1;
            opacity: 1;
            animation-timing-function: if($trans > 0s, ease-in, step-end);
        }
        #{$fade-end}, 100% {
            opacity: 0;
        }
    }

    animation-name: $slide-animation-name;
    animation-duration: $total-dur * $items;
    animation-iteration-count: infinite;
    animation-fill-mode: forwards;

    @for $i from 1 through $items {
        &:nth-child(#{$i}) {
            animation-delay: load-delay(($i - 1) * $total-dur + $init-delay);
        }
    }
}
