@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:selector";
@use '../functions/maps';
@use '../functions/selectors';
@use '../functions/compare';
@use "../config" as var;

// extending from
@use "../styles/placeholders";

$possible-queries: (
    lt: max,
    gt: min,
    max: max,
    min: min,
);

@mixin _media($query, $value) {
    @if ($query == "min") and (list.index('px', math.unit($value))) {
        $value: $value + 1;
    }
    @media screen and (#{$query}-width: $value) {
        @content;
    }
}

@mixin mq($breakpoints: var.$bp, $queries: (lt: max, gt: min)) {
    // get $bp values based on names in $breakpoints, if they match
    $bp-map: ();
    @each $name, $value in $breakpoints {
        $bp-map: map.merge($bp-map, ($name: if($value, $value, compare.bp($name))));
    }

    @if (list.length($bp-map) == 1 and meta.type-of($queries) == 'string') {
        // if single bp and query string provided, don't create a new class; treat as a wrapper for @media
        $query: map.get($possible-queries, $queries);
        $value: list.nth(list.nth($bp-map, 1), 1);
        @include _media($query, $value) {
            @content;
        }
    } @else {
        @each $prefix, $query in $queries {
            // sort breakpoints so that they are included in the default order for overriding eachother
            $sorted-bp: maps.sort-units($bp-map, $order: px em);
            @for $i from 1 through list.length($sorted-bp) {
                $unit-set: maps.sort(list.nth($sorted-bp, $i));
                @if $query == "max" {
                    $unit-set: maps.reverse($unit-set);
                }
                $sorted-bp: list.set-nth($sorted-bp, $i, $unit-set);
            }
            $sorted-bp: maps.merge-all($sorted-bp);

            $last-bp: null;
            @each $name, $value in $sorted-bp {
                @if $value == map.get($sorted-bp, $last-bp) {
                    @each $selector in selector.parse(#{&}) { // this is odd...meant to combine duplicate breakpoints, but why looping on amp? all comma'ed selectors?
                        @at-root #{$selector}-#{$prefix}-#{$name} {
                            @extend #{$selector}-#{$prefix}-#{$last-bp};
                        }
                    }
                } @else {
                    &-#{$prefix}-#{$name} {
                        @include _media($query, $value) {
                            @content;
                        }
                    }
                    $last-bp: $name;
                }
            }
        }
    }
}

@mixin fixed-ratio($x, $y, $width: 100%) {
    width: $width;
    height: 0;
    padding-top: math.div($y, $x) * $width;
}

@mixin bg-video-wrapper($x: 100vw, $y: 100vh, $ratio: 16/9) {
    @if math.unit($x) != vw or math.unit($y) != vh {
        @error "Error in bg-video-wrapper mixin: height and width of the wrapper must be specified in the corresponding viewport unit.";
    }

    max-width: $x;
    max-height: $y;

    > iframe {
        width: $x;
        height: math.div($x, $ratio);
        min-width: $y * $ratio;
        min-height: $y;
    }
}

@mixin columns($columns, $spacing: 0px, $offset: null) {
    @if not($columns > 1) { @error "columns mixin must have more than one column." }
    $width: math.div(100%, $columns);
    $row-end: $columns + "n";
    @if $offset {
        $row-end: $row-end + "+#{$offset}";
    }

    width: calc(#{$width} - #{math.div($spacing * ($columns - 1), $columns)});
    margin-right: $spacing;
    margin-bottom: $spacing;

    &:nth-child(#{$row-end}), &:last-child {
        margin-right: 0;
    }
}

@mixin table-columns($spacing: var.$default-spacing) {
    display: table;
    table-layout: fixed;
    width: calc(100% + (#{$spacing} * 2));
    margin: -$spacing;
    border-spacing: $spacing;

    & .column {
        display: table-cell;
    }
}

@mixin inline-columns($breakpoints, $spacing: null) {
    $bp-col-map: ();
    @extend %font-0;

    > * {
        @extend %inline-block, %full-width;
        margin-bottom: $spacing;

        @for $i from 1 through list.length($breakpoints) {
            $breakpoint: list.nth($breakpoints, $i);
            $columns: null;
            @if list.length($breakpoint) > 2 {
                @error "the responsive-columns mixin only accepts one or two items per breakpoint: the breakpoint and (optionally) the number of columns.";
            } @else if list.length($breakpoint) == 2 {
                $columns: list.nth($breakpoint, 2);
                $breakpoint: list.nth($breakpoint, 1);
            } @else if meta.type-of($breakpoint) == map {
                $columns: list.nth(map.values($breakpoint), 1);
                $breakpoint: list.nth(map.keys($breakpoint), 1);
            }

            @if meta.type-of($breakpoint) == string and map.has-key(var.$bp, $breakpoint) {
                $breakpoint: map.get(var.$bp, $breakpoint);
            } @else if meta.type-of($breakpoint) == string {
                @error 'responsive-columns mixin: breakpoint name #{$breakpoint} is not a valid breakpoint name; must match a key in the $bp map.'
            } @else if meta.type-of($breakpoint) != number {
                @error 'responsive-columns mixin: breakpoint must be either a number or a string identifier; encountered #{$breakpoint} which is a #{meta.type-of($breakpoint)}'
            }

            $bp-col-map: map.merge($bp-col-map, ($breakpoint: $columns));
        }

        $bp-col-map: maps.sort($bp-col-map, keys);
        $last-col: 1;

        @for $i from 1 through list.length($bp-col-map) {
            $bp: list.nth(list.nth($bp-col-map, $i), 1);
            $col: list.nth(list.nth($bp-col-map, $i), 2);
            @if not $col { $col: $last-col + 1; }
            $query: "screen and (min-width: #{$bp + 1px})";
            @if $i < list.length($bp-col-map) {
                $bp-next: list.nth(list.nth($bp-col-map, $i+1), 1);
                $query: "#{$query} and (max-width: #{$bp-next})";
                $last-col: $col;
            }
            @media #{$query} {
                @include columns($col, $spacing);
            }
        }
    }
}

@mixin blur($blur) {
    -webkit-filter: blur($blur);
    filter: blur($blur);
}

// This mixin applies the effects its contents when a element
// with class "hover" (either same element or nearest parent) is hovered
@mixin hover($hover-class: "hover") {
    @at-root &.#{$hover-class}:hover,
    #{selectors.last(&, ".#{$hover-class}:hover >", ":not(.#{$hover-class})")},
    #{selectors.last(&, ".#{$hover-class}:hover *:not(.#{$hover-class})", ":not(.#{$hover-class})")} {
        @content;
    }
}

@mixin no-hover($hover-class: "hover") {
    @at-root &.#{$hover-class}:not(:hover),
    #{selectors.last(&, ".#{$hover-class}:not(:hover) >", ":not(.#{$hover-class})")},
    #{selectors.last(&, ".#{$hover-class}:not(:hover) *:not(.#{$hover-class})", ":not(.#{$hover-class})")} {
        @content;
    }
}

// same idea with a target class
@mixin target($target-class: "target") {
    @at-root &.#{$target-class}:target,
    #{selectors.last(&, ".#{$target-class}:target >", ":not(.#{$target-class})")},
    #{selectors.last(&, ".#{$target-class}:target *:not(.#{$target-class})", ":not(.#{$target-class})")} {
        @content;
    }
}

@mixin no-target($target-class: "target") {
    @at-root &.#{$target-class}:not(:target),
    #{selectors.last(&, ".#{$target-class}:not(:target) >", ":not(#{$target-class})")},
    #{selectors.last(&, ".#{$target-class}:not(:target) *:not(.#{$target-class})", ":not(.#{$target-class})")} {
        @content;
    }
}

@mixin transform($transform) {
    -webkit-transform: $transform;
    transform: $transform;

    &.hw-accel, &.hw-accel-deep, .hw-accel-deep & {
        -webkit-transform: $transform translateZ(0);
        transform: $transform translateZ(0);
    }
}
