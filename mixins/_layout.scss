@use 'sass:list';
@use 'sass:map';
@use '../functions/compare';
@use '../functions/sides';

// extend from
@use '../styles/placeholders';

@mixin size($name, $size) {
    $width: null;
    $height: null;

    @if list.length($size) == 1 {
        $width: $size;
        $height: $size;
    } @else if list.length($size) == 2 {
        $width: list.nth($size, 1);
        $height: list.nth($size, 2);
    } @else {
        @error 'Wrong number of values in #{$name} size.';
    }

    .#{$name} {
        &-width {
            width: $width;
            &-min { min-width: $width; }
            &-max { max-width: $width; }
        }
        &-height {
            height: $height;
            &-min { min-height: $height; }
            &-max { max-height: $height; }
        }
        @if $width and $height {
            &-size {
                @extend .#{$name}-width, .#{$name}-height;
                &-min { @extend .#{$name}-width-min, .#{$name}-height-min; }
                &-max { @extend .#{$name}-width-max, .#{$name}-height-max; }
            }
        }
    }
}

@mixin margins($name, $value) {
    .margin-#{$name} {
        @include sides.all using ($side) {
            margin-#{$side}: $value;
        }
    }
}

@mixin padding($name, $value) {
    @if $value != 'auto' {
        .padding-#{$name} {
            @include sides.all using ($side) {
                padding-#{$side}: $value;
            }
        }
    }
}

@mixin positioning($name, $value) {
    .pos-#{$name} {
        @include sides.all using ($side) {
            #{$side}: $value;
        }
    }
}

@mixin z-range($minZ: 0, $maxZ: 9) {
    $min: if(list.length($minZ) > 1, list.nth($minZ, 1), $minZ);
    $max: if(list.length($minZ) > 1, list.nth($minZ, 2), $maxZ);
    @for $i from $min through $max {
        $class-name: if($i < 0, z-neg-#{($i * -1)}, z-#{$i});
        .#{$class-name} {
            @extend %relative;
            z-index: $i;
        }
    }
}

@mixin border($name, $styles) {
    .border-#{$name} {
        @include sides.all using ($side) {
            border-#{$side}-width: map.get($styles, width);
            border-#{$side}-style: map.get($styles, style);
            border-#{$side}-color: map.get($styles, color);
        }
    }
}

%h-line {
    display: flex;
    flex-direction: row;
    align-items: center;

    &::before, &::after {
        content: '';
        flex: 1 1 auto;
        border-top-color: inherit;
    }

    &::before {
        margin-right: .5em;
    }

    &::after {
        margin-left: .5em;
    }
}

@mixin h-line($name, $styles) {
    .h-line-#{$name} {
        @extend %h-line;
        &::before, &::after {
            border-top-width: map.get($styles, width);
            border-top-style: map.get($styles, style);
            @if map.has-key($styles, color) {
                border-top-color: map.get($styles, color) !important;
            }
        }
    }
}

@mixin wrapper($breakpoints, $min-margins: 0) {
    @for $i from 1 through list.length($breakpoints) {
        $bp: compare.bp(list.nth($breakpoints, $i));
        $breakpoints: list.set-nth($breakpoints, $i, $bp);
    }

    $bp-first: list.nth($breakpoints, 1);
    $bp-last: list.nth($breakpoints, list.length($breakpoints));

    @if list.length($breakpoints) < 2 {
        @error 'Invalid breakpoint list: must contain at least two values.';
    } @else if $bp-first < $bp-last {
        @error 'Invalid breakpoint list: values should proceed from highest to lowest';
    }

    margin-left: auto;
    margin-right: auto;
    max-width: $bp-first - ($min-margins * 2);

    @for $i from 1 to list.length($breakpoints) {
        $bp: list.nth($breakpoints, $i);
        $bp-next: list.nth($breakpoints, $i + 1);
        $query: null;
        $invalid: null;

        @if $bp < $bp-next {
            @error 'Invalid breakpoint list: order must be consistent.';
        }

        @media screen and (max-width: $bp) {
            max-width: $bp-next - ($min-margins * 2);
        }
    }
}
