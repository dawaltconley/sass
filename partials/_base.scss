@use "sass:math";
@use "sass:list";
@use "sass:map";
@use "variables" as v;
@use "mixins/convenience" as mix;

/*
 * Reset some basic elements
 */

body, h1, h2, h3, h4, h5, h6,
p, blockquote, pre, hr,
dl, dd, ol, ul, figure {
    margin: 0;
    padding: 0;
}

/*
 * Set all page elements to border-box sizing
 */
 
* {
    box-sizing: border-box;
}

/*
 * Prevent Horizontal Scrolling
 */

html, body {
    max-width: 100%;
    overflow-x: hidden;
    @if v.$native-scroll { scroll-behavior: smooth; }
}

/*
 * Basic styling
 */

body {
    font: v.$base-font-weight list.slash(v.$base-font-size, v.$base-line-height) v.$base-font-family;
    -webkit-text-size-adjust: 100%;
    -webkit-font-feature-settings: "kern" 1;
    -moz-font-feature-settings: "kern" 1;
    -o-font-feature-settings: "kern" 1;
    font-feature-settings: "kern" 1;
    font-kerning: normal;
}

/*
 * Set `margin-bottom` to maintain vertical rhythm
 */

h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
ul, ol, dl, figure,
article header,
%vertical-rhythm,
.v-rhythm > * {
    margin-bottom: v.$default-spacing;
    margin-right: 0;
}

%horizontal-rhythm,
.h-rhythm > * {
    margin-right: v.$default-spacing;
    margin-bottom: 0;
}

@each $name, $value in v.$spacings {
    .v-rhythm-#{$name} > * {
        @extend %vertical-rhythm;
        @if $value != v.$default-spacing {
            margin-bottom: $value;
        }
    }
    .h-rhythm-#{$name} > * {
        @extend %horizontal-rhythm;
        @if $value != v.$default-spacing {
            margin-right: $value;
        }
    }
}

.v-rhythm-0 {
    @include mix.mq {
        & > * {
            margin-bottom: 0;
        }
    }
}

.h-rhythm-0 {
    @include mix.mq {
        & > * {
            margin-right: 0;
        }
    }
}

*:last-child {
    margin-bottom: 0;
    margin-right: 0;
}

/**
 * Media
 */

img {
    max-width: 100%;
    vertical-align: middle;
}

figcaption {
    @extend .text-light !optional;
    font-style: italic;
    font-synthesis: bold;
    text-align: center;

    & > * {
        font-synthesis: initial;
    }
}

iframe {
    border: 0;
    overflow: hidden;
}

/**
 * Figures
 */

figure > img {
    display: block;
}

figcaption {
    font-size: smaller;
}

/**
 * Lists
 */

ul, ol, .indented {
    margin-left: v.$default-spacing * 2;

    @media screen and (max-width: map.get(v.$bp, mobile)) {
        margin-left: v.$default-spacing;
    }
}

li {
    > ul,
    > ol {
         margin-bottom: 0;
    }
}

.unlist {
    margin-left: 0;
    list-style: none;
}

/**
 * Headings
 */

h1, h2, h3, h4, h5, h6 {
    font-family: v.$heading-font-family;
    font-weight: v.$heading-font-weight;
    line-height: 1;
    text-decoration: none;
}

@for $i from 1 through 6 { // generate header styles
    $font-size: if($i > list.length(v.$heading-sizes), 1em, list.nth(v.$heading-sizes, $i));

    h#{$i}, .fs-h#{$i} {
        font-size: $font-size;
        letter-spacing: math.div($font-size, -100);
    }
}

hr {
    @extend .border-light-t !optional;
    margin: v.$default-spacing 0;
    height: 1px;
    border: 0;
    border-top-width: 1px;
    border-top-style: solid;
}

/**
 * Links
 */

a {
    text-decoration: none;

    &:hover {
        text-decoration: underline;
    }
}

button {
    padding: 0;
    border: 0;
    background-color: transparent;
    color: inherit;
}

summary {
    cursor: pointer;
    user-select: none;
}

/*
 * Blockquotes
 */

blockquote {
    $border-size: 4px;
    border-left-width: $border-size;
    border-left-style: solid;
    padding-left: v.$default-spacing - $border-size;
    letter-spacing: -1px;
    font-style: italic;
}

/*
 * Code formatting
 */

pre, code {
    font-size: 15px;
    border-width: 1px;
    border-style: solid;
    border-radius: 3px;
}

code {
    padding: 1px 5px;
}

pre {
    padding: 8px 12px;
    overflow-x: auto;

    > code {
        border: 0;
        padding-right: 0;
        padding-left: 0;
    }
}

/*
 * Forms
 */

input[type="text"], textarea {
    border-width: 1px;
    border-style: solid;
    border-radius: 3px;
    padding: .5em;
}

select {
    height: 2em;
}

textarea {
    resize: vertical;
    min-height: 8em;
}

input[type="checkbox"], label {
    cursor: pointer;
}

input[type="checkbox"] + label,
label > input[type="checkbox"] + * {
    margin-left: 0.7ex;
    line-height: 0;
}

*:focus:invalid {
    border: 1px solid red;
    outline-color: red;
}

/*
 * Icons
 */

svg {
    display: inline; // for ie and others
    display: initial;
}
