@use "sass:color";
@use "sass:list";
@use "sass:math";
@use "sass:selector";
@use "sass:string";
@use "../functions/sides";
@use "convenience" as mix;
@use "node_modules/sass-color-helpers/stylesheets/_color-helpers.scss" as ch;

@mixin themeify($selectors...) {
    $group: ();
    @each $selector in $selectors {
        $group: list.append($group, "& #{$selector}, #{selector.unify(&, $selector)}", "comma");
    }

    @at-root #{$group} {
        @content;
    }
}

@function darken-bg($primary, $secondary, $tertiary: null) {
    @if $tertiary {
        @return color.mix(color.mix($primary, $tertiary, 85%), $secondary, 16%);
    } @else {
        @return color.mix($primary, $secondary, 16%);
    }
}

@mixin accessibility($name, $background-color, $text-color, $brand-color: null, $accessibility: "AA") {
    $aa: string.to-upper-case($accessibility) == "AA";
    $aaa: string.to-upper-case($accessibility) == "AAA";

    $ct-tx-bg: ch.ch-color-contrast($background-color, $text-color);

    @if ($ct-tx-bg < 4.5 and $aa) or ($ct-tx-bg < 7 and $aaa) {
        @warn "The contrast ratio of the '#{$name}' theme's text (#{$text-color}) and background (#{$background-color}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
    }

    @if $brand-color {
        $ct-br-tx: ch.ch-color-contrast($brand-color, $text-color);
        $ct-br-bg: ch.ch-color-contrast($brand-color, $background-color);

        @if $ct-br-tx < 3 and $aa {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and text (#{$text-color}) colors is #{$ct-br-tx}, which does not meet WCAG 2.0 AA standard (3).";
        }
        @if ($ct-br-bg < 4.5 and $aa) or ($ct-br-bg < 7 and $aaa) {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and background (#{$background-color}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
        }
    }
}

@mixin theme($background-color, $text-color, $brand-color: null) {
    $light-text: null; $light-theme: null; $ld-tx-bg: null; $ld-br-tx: null; $ld-br-bg: null; $ct-tx-bg: null; $ct-br-tx: null; $ct-br-bg: null;

    $light-theme: color.lightness($text-color) < color.lightness($background-color);
    $ld-tx-bg: math.div(math.abs(color.lightness($text-color) - color.lightness($background-color)), 100%);
    @if $brand-color {
        $ld-br-tx: math.div(math.abs(color.lightness($brand-color) - color.lightness($text-color)), 100%);
        $ld-br-bg: math.div(math.abs(color.lightness($brand-color) - color.lightness($background-color)), 100%);
    }

    @if $light-theme {
        $light-text: color.mix($text-color, $background-color, 58%);
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    } @else {
        $light-text: color.mix($text-color, $background-color, 86%);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    // Basic Styles

    background-color: $background-color;
    color: $text-color;
    border-color: $text-color;

    $dark-background: darken-bg($text-color, $background-color, $brand-color); // I don't love this solution for some reason

    @include themeify("blockquote") {
        color: $light-text;
        border-left-color: color.mix($light-text, $background-color, 25%);
    }

    @include themeify("pre", "code") {
        $box-color: if($light-theme,
            color.adjust($background-color, $lightness: -($ld-tx-bg * 15%)),
            color.adjust($background-color, $lightness: $ld-tx-bg * 15%));
        $box-color: color.adjust($box-color, $saturation: -(color.saturation($box-color) * 0.5) );
        color: color.mix($text-color, $box-color, 80%);
        border-color: color.adjust($box-color, $lightness: -($ld-tx-bg * if($light-theme, 25%, 10%)));
        background-color: $box-color;
    }

    @include themeify('input[type="text"]', "textarea") {
        color: $text-color;
        background: color.mix($text-color, $background-color, if($light-theme, 0%, 5%));
        border-color: color.mix($text-color, $background-color, 25%);

        &::placeholder {
            color: $light-text;
            opacity: 1;
        }
    }

    // Text

    @include themeify(".text-light") {
        color: $light-text;
    }

    @include themeify(".text-brand") {
        color: $brand-color;
    }

    // Background

    @include themeify(".theme-bg") {
        background-color: $background-color;
    }

    @include themeify(".overlay") {
        background-color: rgba($background-color, 0.5);
    }

    @include themeify(".heavy-overlay") {
        background-color: rgba($background-color, 0.75);
    }

    // Borders

    @include themeify(".border-light") {
        @include sides.all using ($side) {
            border-#{$side}-color: color.mix($text-color, $background-color, 10%);
        }
    }

    @include themeify(".border-x-light") {
        @include sides.all using ($side) {
            border-#{$side}-color: color.mix($text-color, $background-color, 5%);
        }
    }

    // Links

    @if $brand-color {
        @include themeify("a", ".theme-link") {
            color: $brand-color;

            &:visited { color: color.adjust($brand-color, $lightness: if($light-theme, $ld-br-bg, $ld-br-tx) * 35%); }
            &:hover { color: color.adjust($brand-color, $lightness: -(if($light-theme, $ld-br-tx, $ld-br-bg) * 45%)); }
        }
    }

    @include themeify(".subtle-link") {
        &, &:hover, &:visited {
            color: $text-color;
        }
    }

    @include themeify(".hover-shade") {
        transition-property: background-color;

        @include mix.hover {
            background-color: $dark-background;
        }
    }

    // Buttons

    $button-color: if($brand-color, $brand-color, $text-color);
    $button-text: if($brand-color and not $light-theme, $text-color, $background-color);

    @include themeify(".button") {
        background-color: $button-color;

        &, &:hover, &:visited {
            color: $button-text;
        }

        &:hover {
            background-color: color.mix($button-color, $button-text, 80%);
        }
    }

    @include themeify(".button-o") {
        background-color: $background-color;
        border-color: $button-color;

        &, &:visited {
            color: $button-color;
        }

        &:hover {
            color: $button-text;
            background-color: $button-color;
            border-color: $button-color;
        }
    }

    @if $brand-color {
        @include themeify(".button.subtle-button") {
            color: $background-color;
            background-color: $text-color;

            &:hover {
                background-color: color.mix($text-color, $background-color, 80%);
            }
        }

        @include themeify(".button-o.subtle-button") {
            &:not(:hover) {
                border-color: $text-color;

                &, &:visited {
                    color: $text-color;
                }
            }
        }
    }

    // Decoration

    @include themeify(".fade-bottom::after") {
        background: linear-gradient(to bottom, rgba($background-color, 0), $background-color 80%);
    }

    // SVG

    @include themeify(".fill-color-theme") {
        &-text {
            fill: $text-color;
        }
        &-bg {
            fill: $background-color;
        }
        &-brand {
            fill: $brand-color;
        }
    }

    @include themeify(".stroke-color-theme") {
        &-text {
            stroke: $text-color;
        }
        &-bg {
            stroke: $background-color;
        }
        &-brand {
            stroke: $brand-color;
        }
    }
}
