@use "sass:list";
@use "sass:map";
/*
 * Themes
 */

@each $theme, $settings in $themes {
    $i: list.index($themes, ($theme $settings));
    $selectors: ".#{$theme}";

    @if $i == 1 { // make first theme in map default
        $selectors: list.append("body", $selectors, "comma");
    }

    @each $other-theme in map.keys($themes) { // set theme depth
        @if $other-theme != $theme {
            $ancestry: ();
            $new-ancestry: ();
            @for $d from 0 to $theme-depth {
                $new-ancestry: list.append($new-ancestry, ".#{$other-theme} .#{$theme}", "space");
                $ancestry: list.append($ancestry, $new-ancestry, "comma");
            }
            $selectors: list.append($selectors, $ancestry, "comma");
        }
    }

    #{$selectors} { // assign theme styles to resulting selector list
        @include theme(
            $background-color: map.get($settings, background-color),
            $text-color: map.get($settings, text-color),
            $brand-color: map.get($settings, brand-color),
        );
    }

    $accessibility: if(map.has-key($settings, accessibility), map.get($settings, accessibility), "AA");

    @include accessibility(
        $name: $theme,
        $background-color: map.get($settings, background-color),
        $text-color: map.get($settings, text-color),
        $brand-color: map.get($settings, brand-color),
        $accessibility: $accessibility,
    );
}

.no-bg {
    background-color: transparent !important;
}
