@use "sass:map";
@use "sass:string";
@use "../functions/sides";
@use "../config" as c;
@use "../mixins/convenience" as mix;

// extending from
@use "./placeholders";

/*
 * Hover
 */

.hover-display {
    @include mix.no-hover {
        display: none;
    }
}

.hover-fade-in {
    opacity: 0;
    -webkit-transition-property: opacity;
    transition-property: opacity;

    @include mix.hover {
        opacity: 1;
    }
}

.hover-scale {
    transform: scale(1) translateZ(0);
    -webkit-transition-property: transform;
    transition-property: transform;

    @include mix.hover {
        transform: scale(1.05) translateZ(0);
    }
}

%pseudo-fill {
    content: "";
    position: absolute;
    top: 0; left: 0;
    width: 100%;
    height: 100%;
}

.pseudo-fill-parent::before {
    @extend %pseudo-fill;
}

.hover-lighten {
    @extend %relative;

    &::after {
        @extend %pseudo-fill;
        background-color: rgba(white, 0);
        transition: inherit;
        transition-property: background-color;
    }

    @include mix.hover {
        &::after {
            background-color: rgba(white, 0.1);
        }
    }
}

.hover-darken {
    @extend %relative;

    &::after {
        @extend %pseudo-fill;
        background-color: rgba(black, 0);
        transition: inherit;
        transition-property: background-color;
    }

    @include mix.hover {
        &::after {
            background-color: rgba(black, 0.1);
        }
    }
}

.hover-blur {
    @include mix.blur(0);
    -webkit-transition-property: -webkit-filter;
    transition-property: filter;

    @include mix.hover {
        @include mix.blur(5px);
    }
}

%hover-shadow {
    @extend %relative;

    &::before {
        @extend %pseudo-fill;
        opacity: 0;
        transition: inherit;
        transition-property: opacity;
        transition-timing-function: ease-out;
    }

    @include mix.hover {
        &::before {
            opacity: 1;
        }
    }
}

.hover-shadow {
    // @each $side in sides.$sides {
    //     &-#{string.slice($side, 1, 1)} {
    //         @extend %hover-shadow;
    //
    //         &::before {
    //             background: linear-gradient(map.get(c.$angles, $side), rgba(black, 0.3), rgba(black, 0));
    //         }
    //     }
    // }
    @include sides.all using ($side) {
        @extend %hover-shadow;
        &::before {
            background: linear-gradient(map.get(c.$angles, $side), rgba(black, 0.3), rgba(black, 0));
        }
    }
}

.hover-drop-shadow {
    $size: 2px;
    transition-property: box-shadow;

    @include mix.hover {
        box-shadow: $size $size (2*$size) rgba(black, 0.2);
    }
}

/*
 * Target
 */

.target-display {
    @include mix.no-target {
        display: none;
    }
}

.target-hide {
    @include mix.target {
        display: none;
    }
}

.target-max-height-expand {
    transition-property: max-height;
    transition-timing-function: ease-out;

    @include mix.target {
        max-height: 100vw;
    }
}

/*
 * Focus
 */

.no-focus:focus {
    outline: none;
}
